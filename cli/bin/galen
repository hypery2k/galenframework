#!/usr/bin/env node

var util = require('util'),
  yargs = require('yargs');

var DEBUG_ENV = 'galen';

var debugLog = util.debuglog(DEBUG_ENV);

// basic bash completion
yargs
  .usage('Galen Framework is an open-source tool for testing layout and responsive design of web applications.\n\nUsage: $0 [options]')
  .completion('completion', function (current, argv) {
    var args = argv,
      result = [
        'test',
        'check',
        'dump',
        'config',
        'help',
        'version'
      ];
    // 'current' is the current command being completed.
    // 'argv' is the parsed arguments so far.
    // simply return an array of completions.
    if (current) {
      var currentCommand = current;
      argv = [];
      switch (current) {
        case 'test':
          result = [
            '<specFile>.gspec',
            '--htmlreport',
            '--testngreport',
            '--jsonreport',
            '--filter',
            '--parallel-tests',
            '--config'
          ];
          break;
        case 'check':
          result = [
            '<specFile>.test',
            '--url',
            '--size',
            '--javascript',
            '--include',
            '--exclude',
            '--htmlreport',
            '--testngreport',
            '--jsonreport',
            '--config'
          ];
          break;
        case 'dump':
          result = [
            '<specFile>.gspec',
            '--url',
            '--size',
            '--export',
            '--max-width',
            '--max-height',
            '--config'
          ];
          break;
      }
    }
    return result;
  }).argv;


var spawn = require('child_process').spawn;
var path = require('path');
var baseDir = path.dirname(require.main.filename);
var childProcessOptions = {
  stdio: 'inherit'
};

// remove node args
var args = process.argv.slice(2);

function resolveModulePath(moduleName) {
  var pathItems = [].slice.call(arguments, 1);
  pathItems.unshift(path.dirname(require.resolve(moduleName)));

  return path.resolve.apply(null, pathItems);
}

// adding chromedriver
var chromePath = resolveModulePath('chromedriver', 'chromedriver/chromedriver');
if (process.platform === 'win32') {
  chromePath += '.exe';
}
args.push('-Dwebdriver.chrome.driver=' + chromePath);

// adding geckodriver
var geckoPath = resolveModulePath('geckodriver', '..', 'geckodriver');
if (process.platform === 'win32') {
  geckoPath += '.exe';
}
args.push('-Dwebdriver.gecko.driver=' + geckoPath);

var programPath = resolveModulePath('galenframework', 'lib/galen/galen');
if (process.platform === 'win32') {
  programPath += '.bat';
}

debugLog('Using following programPath:', programPath);
debugLog('     ->                args:', args);
debugLog('     -> childProcessOptions:', childProcessOptions);
var galenProcess = spawn(programPath, args, childProcessOptions);

galenProcess.on('error', function (error) {
  console.error(error);
  process.exit(1);
});

galenProcess.on('exit', function (exitCode) {
  process.exit(exitCode);
});
